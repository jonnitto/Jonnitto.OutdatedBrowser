prototype(Jonnitto.OutdatedBrowser:Component.Presentation) < prototype(Neos.Fusion:Component) {
    lowerThan = ${Configuration.setting('Jonnitto.OutdatedBrowser.lowerThan')}
    implementation = ${Configuration.setting('Jonnitto.OutdatedBrowser.implementation')}

    // Set the language to a specific one
    language = null

    languageDimension = 'language'
    includeCSS = true
    includeJS = true

    availableLanguages = ${['cs','da','de','el','en','es-pe','es','et','fa','fi','fr','hr','hu','id','it','ja','ko','lt','nb','nl','pl','pt-br','pt','ro','ru','sk','sl','sv','tr','uk','zh-cn','zh-tw']}
    fallbackLanguage = ${Configuration.setting('Jonnitto.OutdatedBrowser.fallbackLanguage')}

    // Internal
    presets = ${Configuration.setting('Jonnitto.OutdatedBrowser.presets')}

    @if.hasLowerThan = ${this.lowerThan}

    renderer = Neos.Fusion:Component {
        @apply.props = ${props}
        CSSFile = ${props.includeCSS ? 'resource://Jonnitto.OutdatedBrowser/Public/Main.css' : false}
        JSFile = ${props.includeJS && props.implementation ? 'resource://Jonnitto.OutdatedBrowser/Public/' + props.implementation + '.js' : false}

        selectedLanguage = Neos.Fusion:Case {
            hasFile {
                documentLanguage = Neos.Fusion:Case {
                    specificLanguageIsSet {
                        condition = ${props.language && Type.isString(props.language)}
                        renderer = ${props.language}
                    }
                    hasDimension {
                        condition = ${Configuration.setting('Neos.ContentRepository.contentDimensions.' + props.languageDimension) != null}
                        renderer = ${String.replace(site.context.dimensions[props.languageDimension][0], '_', '-')}
                    }
                    hasDefaultLocale {
                        defaultLocale = ${Configuration.setting('Neos.Flow.i18n.defaultLocale')}
                        condition = ${this.defaultLocale}
                        renderer = ${String.crop(this.defaultLocale, 2)}
                    }
                    default {
                        condition = true
                        renderer = ${props.fallbackLanguage}
                    }
                }
                condition = ${Array.indexOf(props.availableLanguages, String.toLowerCase(this.documentLanguage)) != -1}
                renderer = ${String.toLowerCase(this.documentLanguage)}
            }
            useFallbackLanguage {
                condition = ${props.fallbackLanguage && Array.indexOf(props.availableLanguages, String.toLowerCase(props.fallbackLanguage)) != -1}
                renderer = ${String.toLowerCase(props.fallbackLanguage)}
            }
            fallbackToEn {
                condition = true
                renderer = 'en'
            }
        }
        markup = ${File.readFile('resource://Jonnitto.OutdatedBrowser/Private/Templates/' + this.selectedLanguage + '.html')}
        markup.@process {
            addTarget = ${String.replace(value, 'id="btnUpdateBrowser"', 'id="btnUpdateBrowser" rel="nofollow noopener" target="_blank"')}
            replaceUrl = ${String.replace(value, 'http://outdatedbrowser.com', 'https://bestvpn.org/outdatedbrowser')}
            replaceHeadlineTagOpen = ${String.replace(value, '<h6>', '<p><strong>')}
            replaceHeadlineTagClose = ${String.replace(value, '</h6>', '</strong></p>')}
            replaceLastClass = ${String.replace(value, ' class="last"', ' class="outdated-last"')}
        }

        featureArray = Neos.Fusion:Map {
            items = ${Type.isArray(props.lowerThan) ? props.lowerThan : [props.lowerThan]}
            itemRenderer = ${Array.indexOf(Array.keys(props.presets), item) != -1 ? props.presets[item] : item}
        }

        @if.hasFeatureArray = ${this.featureArray && Type.isArray(this.featureArray)}

        renderer = afx`
            <div id='outdated' data-lowerthan={Array.join(props.featureArray, ',')}>
                <style @if.set={props.CSSFile}>{File.readFile(props.CSSFile)}</style>
                {props.markup}
                <script @if.set={props.JSFile}>{File.readFile(props.JSFile)}</script>
            </div>
        `
    }
}
